/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.tej.SwaggerCodgen.api;

import io.tej.SwaggerCodgen.model.UserInfo;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-21T21:38:22.262421300+03:00[Europe/Moscow]")
@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user
     * Create user
     *
     * @param userInfo Information about User (required)
     * @return Created. (status code 201)
     *         or Bad Request. (status code 400)
     */
    @ApiOperation(value = "", nickname = "createUser", notes = "Create user", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created."),
        @ApiResponse(code = 400, message = "Bad Request.") })
    @PostMapping(
        value = "/user",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> _createUser(@ApiParam(value = "Information about User" ,required=true )  @Valid @RequestBody UserInfo userInfo) {
        return createUser(userInfo);
    }

    // Override this method
    default  ResponseEntity<Void> createUser(UserInfo userInfo) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /user/{id}
     * Delete user by id
     *
     * @param id ID of the user (required)
     * @return No Content. (status code 204)
     *         or Not Found. (status code 404)
     */
    @ApiOperation(value = "", nickname = "deleteUserById", notes = "Delete user by id", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content."),
        @ApiResponse(code = 404, message = "Not Found.") })
    @DeleteMapping(
        value = "/user/{id}"
    )
    default ResponseEntity<Void> _deleteUserById(@ApiParam(value = "ID of the user",required=true) @PathVariable("id") Long id) {
        return deleteUserById(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteUserById(Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user
     * Get list of users
     *
     * @return Successful response. (status code 200)
     *         or Forbidden. (status code 403)
     *         or Not Found. (status code 404)
     */
    @ApiOperation(value = "", nickname = "getListUsers", notes = "Get list of users", response = UserInfo.class, responseContainer = "List", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response.", response = UserInfo.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Forbidden."),
        @ApiResponse(code = 404, message = "Not Found.") })
    @GetMapping(
        value = "/user",
        produces = { "application/json" }
    )
    default ResponseEntity<List<UserInfo>> _getListUsers() {
        return getListUsers();
    }

    // Override this method
    default  ResponseEntity<List<UserInfo>> getListUsers() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstname\" : \"firstname\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{id}
     * Get user by id
     *
     * @param id ID of the user (required)
     * @return Successful response. (status code 200)
     *         or Not Found. (status code 404)
     */
    @ApiOperation(value = "", nickname = "getUserById", notes = "Get user by id", response = UserInfo.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response.", response = UserInfo.class),
        @ApiResponse(code = 404, message = "Not Found.") })
    @GetMapping(
        value = "/user/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<UserInfo> _getUserById(@ApiParam(value = "ID of the user",required=true) @PathVariable("id") Long id) {
        return getUserById(id);
    }

    // Override this method
    default  ResponseEntity<UserInfo> getUserById(Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstname\" : \"firstname\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /user/{id}
     * Update user by id
     *
     * @param id ID of the user (required)
     * @param userInfo Information about User (required)
     * @return Successful response. (status code 200)
     *         or Not Found. (status code 404)
     */
    @ApiOperation(value = "", nickname = "updateUserById", notes = "Update user by id", response = UserInfo.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response.", response = UserInfo.class),
        @ApiResponse(code = 404, message = "Not Found.") })
    @PatchMapping(
        value = "/user/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UserInfo> _updateUserById(@ApiParam(value = "ID of the user",required=true) @PathVariable("id") Long id,@ApiParam(value = "Information about User" ,required=true )  @Valid @RequestBody UserInfo userInfo) {
        return updateUserById(id, userInfo);
    }

    // Override this method
    default  ResponseEntity<UserInfo> updateUserById(Long id, UserInfo userInfo) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstname\" : \"firstname\", \"created\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"updated\" : \"2000-01-23T04:56:07.000+00:00\", \"email\" : \"email\", \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
