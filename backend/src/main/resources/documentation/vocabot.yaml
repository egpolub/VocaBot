openapi: "3.0.0"
info:
  description: "VocaBot REST API"
  version: "1.0.2"
  title: "VocaBot"
tags:
  - name: admin
    description: Admin operations
  - name: user
    description: User operations
  - name: dictionary
    description: Dictionary operations
  - name: word
    description: Operations about word
  - name: auth
    description: Authentication (signin, signup, signout)



paths:
  /admin/user:
    get:
      tags:
        - "admin"
      description: "Get list of users"
      operationId: "getListUsers"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserInfo"
        "403":
          description: Forbidden.
        "404":
          description: Not Found.

  /admin/user/{userId}:
    delete:
      tags:
        - "admin"
      description: "Delete user by userId"
      operationId: "Delete user by userId"
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content.
        "404":
          description: Not Found.

  /user:
    post:
      tags:
        - "user"
      description: "Create user"
      operationId: "Create user"
      requestBody:
        description: Information about User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        "201":
          description: Created.
        "400":
          description: Bad Request.
  /user/{userId}:
    get:
      tags:
        - "user"
      description: "Get user by userId"
      operationId: "Get user by userId"
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        "404":
          description: Not Found.
    patch:
      tags:
        - "user"
      description: "Update user by userId"
      operationId: "Update user by userId"
      parameters:
        - name: userId
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Information about User
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        "200":
          description: Successful response.
        "404":
          description: Not Found.

  /dictionary:
    get:
      tags:
        - "dictionary"
      description: "Get list of the dictionaries for User"
      operationId: "getListDictionaries"
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DictionaryInfo"
    post:
      tags:
        - "dictionary"
      description: "Create dictionary"
      operationId: "createDictionary"
      requestBody:
        description: Information about Dictionary
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DictionaryInfo'
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'
        "400":
          description: Bad Request.
        "409":
          description: Conflict.

  /dictionary/{dictionaryId}:
    get:
      tags:
        - "dictionary"
      description: "Get Dictionary"
      operationId: "getDictionary"
      parameters:
        - name: dictionaryId
          in: path
          description: ID of the dictionary
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DictionaryInfo"
    patch:
      tags:
        - "dictionary"
      description: "Update dictionary"
      operationId: "updateDictionary"
      parameters:
        - name: dictionaryId
          in: path
          description: ID of the dictionary
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Information about Dictionary
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DictionaryInfo'
      responses:
        "200":
          description: Successful response.
        "400":
          description: Bad Request.
        "409":
          description: Conflict.
    delete:
      tags:
        - "dictionary"
      description: "Delete empty dictionary"
      operationId: "deleteDictionary"
      parameters:
        - name: dictionaryId
          in: path
          description: ID of the dictionary
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: No Content.
        "409":
          description: Conflict. Dictionary not empty

  /word:
    post:
      tags:
        - "word"
      description: "Create word"
      operationId: "Create word"
      requestBody:
        description: Information about Word
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WordInfo'
      responses:
        "201":
          description: Created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ID'

        "400":
          description: Bad Request.
        "409":
          description: Conflict.


  /words/{dictionaryId}:
    get:
      tags:
        - "word"
      description: "Get list words by dictionaryId"
      operationId: "Get list words by dictionaryId"
      parameters:
        - name: dictionaryId
          in: path
          description: ID of the dictionary
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WordInfo"
        "204":
          description: Not Content.
    delete:
      tags:
        - "word"
      description: "Delete all words by dictionaryId"
      operationId: "Delete all words by dictionaryId"
      parameters:
        - name: dictionaryId
          in: path
          description: ID of the dictionary.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: No Content.
        "404":
          description: Not Found.

  /word/{dictionaryId}:
    patch:
      tags:
        - "word"
      description: "Update word by wordId"
      operationId: "Update word by wordId"
      parameters:
        - name: dictionaryId
          in: path
          description: ID of the dictionary
          required: true
          schema:
            type: integer
            format: int32
        - name: wordId
          in: query
          description: The word ID. Created after adding to the system
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Information about Word
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WordInfo'
      responses:
        "200":
          description: Successful response.
        "404":
          description: Not Found.

    delete:
      tags:
        - "word"
      description: "Delete word by wordId"
      operationId: "Delete word by wordId"
      parameters:
        - name: dictionaryId
          in: path
          description: ID of the dictionary
          required: true
          schema:
            type: integer
            format: int32
        - name: wordId
          in: query
          description: The word ID. Created after adding to the system
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: No Content.
        "404":
          description: Not Found.


  /auth/signup:
    post:
      tags:
        - "auth"
      description: "Register user"
      operationId: "Register user"
      requestBody:
        description: Information about authenticatio
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthInfo'
      responses:
        "200":
          description: Successful authentication


components:
  schemas:
    AuthInfo:
      description: Information for user authentication
      type: object
      required:
        - userId
        - authDate
        - firstname
        - username
        - hash
      properties:
        userId:
          type: integer
          format: int64
          description: The user ID.
        authDate:
          type: string
          format: date-time
          description: The authentication date.
        firstname:
          type: string
          description: The user firstname.
        username:
          type: string
          description: The user name.
        hash:
          type: string
          description: The user hash.

    UserInfo:
      description: Information about User
      type: object
      required:
        - userId
      properties:
        userId:
          type: integer
          format: int64
          description: The user ID.
        firstname:
          type: string
          description: The user firstname.
        username:
          type: string
          description: The user name.
        email:
          type: string
          format: email
          description: The user email.
        created:
          type: string
          format: date-time
          description: The user created.
        updated:
          type: string
          format: date-time
          description: The user last updated.

    WordInfo:
      description: Information about Word
      type: object
      required:
        - dictionaryId
        - word
        - translation
      properties:
        wordId:
          type: integer
          format: int32
          description: The word ID. Created after adding to the system
        dictionaryId:
          type: integer
          format: int32
          description: The dictionary ID.
        word:
          type: string
          description: The word.
        translation:
          type: string
          description: The translation of a word.
        created:
          type: string
          format: date-time
          description: The word created.
        updated:
          type: string
          format: date-time
          description: The word last updated.

    DictionaryInfo:
      description: Information about Dictionary
      type: object
      properties:
        dictionaryId:
          type: integer
          format: int32
          description: The dictionary ID. Created after adding to the system
        name:
          type: string
          description: The dictionary name
        type:
          type: string
          enum:
            - rus-eng
            - unknown-language
          description: type of the dictionary
        userId:
          type: integer
          format: int64
          description: The user ID
        total:
          type: integer
          format: int32
          description: Total count of words
        totalCount:
          type: integer
          format: int32
          description: Word limit in the dictionary

    ID:
      properties:
        id:
          type: integer
          format: int32
